from manim import *
import numpy as np

class TiltedCircleAnimation(ThreeDScene):
    def construct(self):
        # 设置3D场景的视角
        self.set_camera_orientation(phi=70 * DEGREES, theta=-30 * DEGREES)
        
        # 创建坐标轴和XY平面作为参考
        axes = ThreeDAxes()
        xy_plane = Surface(
            lambda u, v: axes.c2p(u, v, 0),
            u_range=[-3.5, 3.5],
            v_range=[-3.5, 3.5],
            resolution=(10, 10),
            fill_opacity=0.2,
            fill_color=BLUE,
            stroke_width=0
        )
        
        # 倾斜角度
        tilt_angle = 45 * DEGREES
        
        # 使用参数方程创建倾斜圆
        radius = 2
        def param_circle(t):
            x = radius * np.cos(t)
            y = radius * np.sin(t)
            z = 0
            # 应用倾斜旋转
            point = np.array([x, y, z])
            return rotate_vector(point, tilt_angle, RIGHT)
        
        # 创建3D参数曲线
        circle = ParametricFunction(
            param_circle,
            t_range=[0, TAU],
            color=YELLOW,
            stroke_width=5
        )
        
        # 创建一个点（使用小球体表示）
        point = Sphere(radius=0.15, color=RED)
        point.move_to(param_circle(0))  # 起始位置
        
        # 添加场景元素
        self.add(axes, xy_plane)
        self.play(Create(circle), run_time=1.5)
        self.play(FadeIn(point))
        
        # 创建点的轨迹
        path = TracedPath(point.get_center, stroke_width=3, stroke_color=ORANGE)
        self.add(path)
        
        # 创建点沿圆运动的动画
        def point_updater(mob, alpha):
            t = alpha * TAU  # 从0到2π
            mob.move_to(param_circle(t))
        
        # 播放点沿圆运动的动画
        self.play(
            UpdateFromAlphaFunc(point, point_updater),
            run_time=5,
            rate_func=linear
        )
        
        # 从不同角度查看
        self.wait(1)
        self.move_camera(phi=90 * DEGREES, theta=0 * DEGREES, run_time=2)
        self.wait(1)
        self.move_camera(phi=60 * DEGREES, theta=60 * DEGREES, run_time=2)
        self.wait(1)