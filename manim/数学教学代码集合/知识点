# 1. 代码规范
1.tex_template=TexTemplateLibrary.ctex##不加这个会报错，因为TEX没法直接识别汉语,别用mathtex，用TEX
eg：explanation6 = Tex(
            r"由于 $ \sin x $ 在 $ (0, \frac{\pi}{2}) $ 上是\textbf{凸函数}，"
            r"我们使用割线放缩。",
            tex_template=TexTemplateLibrary.ctex,color=TEAL
        ).next_to(title2, DOWN, buff=0.5)
2.write（里面只能加一个tex_template）
3.3D要用ThreeDScene，2D要用Scene
3.rightangle只能用在2D里面
4.不要一步一步的渲染，要先写个框架初稿，然后再修改
eg:        self.add_fixed_in_frame_mobjects(A3D_line1)
        A3D_line1.to_corner(UL)
        self.play(Write(A3D_line1))
        triangleABE=Polygon(A,B,E).set_color(RED).set_opacity(0.5)
        self.play(Indicate(triangleABE))
        triangleABE_copy=triangleABE.copy()
        self.add_fixed_in_frame_mobjects(triangleABE_copy)
        triangleABE_copy.to_corner(DL)
        self.play(TransformFromCopy(triangleABE,triangleABE_copy))
5.在3D里面，要用add_fixed_in_frame_mobjects，然后再用to_corner
6.self.camera.project_point()可以用来获取3D坐标的2D坐标（前两个数据是2D需要的，第三个数据是深度信息）
7.LIGHT是光源，RIGHT是右边不要弄错
8.self.play(Add)和self.add()的区别是前者是动画，后者是静态
9.shift,move_to,align_to的区别是shift是相对于当前位置移动，move_to是第一次绝对位置移动，align_to是对齐
10.
config.frame_width = 4    # 设置宽度
config.frame_height = 3   # 设置高度，比例为4:3
config.background_color = WHITE  # 背景设为白色
config.pixel_width = 800    # 宽度像素
config.pixel_height = 600   # 高度像素，保持4:3比例
宽度高度与像素宽高比一致，这些都是放在class的前面的
11.单独给公式中某个东西的渲染颜色，建议用
（1） substrings_to_isolate="x"  # 这个是给公式中需要渲染的部分加上一个标记
（2） self.add(index_labels(text[0]))

        text[0][1:3].set_color(YELLOW)
        text[0][3:6].set_color(RED)
（3）手动用“””给公式中需要渲染的部分加上一个标记
12.坐标轴里一定要统一length和range的值，x轴和y轴的length和range要一致
axes = Axes(
            x_range=[-3, 3, 1],
            y_range=[-3, 3, 1],
            x_length=6,
            y_length=6,
            axis_config={"color": BLUE},
        ).move_to(RIGHT)
13.更新器前要初始化物件，更新器里用become函数，更新器后要self.add()，不然会报错
14.渐变色要用gradient_colors = [[PURPLE, ORANGE, PINK]]，两个[[]]
15.标签朝向3D相机
.rotate(PI/2, axis=RIGHT).rotate(PI*0.75, axis=OUT)
16.移动物体，可以用向量（两坐标相减）， group[2]表示group中的第三个物体
self.play(group.animate.shift(dest.get_center() - group[2].get_center()))
17.自动运行
if __name__ == "__main__":
    import os
    os.system("manim -pqh a.py ")
#2.物件参数
1.坐标系
1.坐标系的参数
      axes = Axes(
            x_range=[-7.5, 7.5, 1],
            y_range=[-6, 9, 1],
            x_length=9,
            y_length=9,
            axis_config={"include_ticks": False, "tip_shape": StealthTip, "tip_width": 0.2, "tip_height": 0.2}
        )
         labels = ax.get_axis_labels()#获取坐标轴标签
2.3D坐标系
x,y,z满足右手笛卡尔坐标系
x大拇指朝向自己，y食指朝向右边，z中指朝向上面
self.set_camera_orientation(phi=75 * DEGREES, theta=30 * DEGREES, zoom=0.5)
其中phi=75 * DEGREES表示相机的俯仰角，与x轴的夹角，正向是向下，负向是向上
theta=30 * DEGREES表示相机的偏航角，表示相机（注意是相机而不是物体）绕着z轴的旋转，正向是逆时针，负向是顺时针,与x轴的夹角
zoom=0.5表示缩放比例，0.5指把物体缩小0.5倍（视觉上）
3.2D坐标系中的一些方法
        line_1 = ax.get_vertical_line(ax.input_to_graph_point(2, curve_1), color=YELLOW)
        line_2 = ax.get_vertical_line(ax.i2gp(3, curve_1), color=YELLOW)
        riemann_area = ax.get_riemann_rectangles(curve_1, x_range=[0.3, 0.6], dx=0.03, color=BLUE, fill_opacity=0.5)
        area = ax.get_area(curve_2, [2, 3], bounded_graph=curve_1, color=GREY, opacity=0.5)
input_to_graph_point(x, curve): 将x坐标转换为曲线上对应点的坐标
i2gp(): 是input_to_graph_point的简写形式
get_vertical_line(): 创建从指定点到x轴的垂直线
这两行代码在x=2和x=3处创建了两条黄色垂直线，通常用来标记积分区间。
面积表示
get_riemann_rectangles(): 创建黎曼矩形，用于近似计算曲线下的面积
x_range: 指定x轴范围
dx: 每个矩形的宽度（越小越精确）
fill_opacity: 填充透明度
get_area(): 直接获取曲线下或曲线间的面积
bounded_graph: 指定下边界曲线（若不指定则默认为x轴）
这行代码计算x从2到3区间内，curve_2和curve_1之间的面积
这些函数常用于可视化积分和面积计算的数学概念。
4.self.renderer.camera.light_source.move_to(3*IN)##光源位置
                light = self.camera.light_source
                        self.add(light)
                        light.save_state()
            self.play(FadeTransform(info_text, light_text))
            self.play(light.animate.move_to(3 * IN), run_time=3)
            self.play(light.animate.shift(10 * OUT), run_time=3)##光源移动
self.add_fixed_orientation_mobjects(dot)##可以用来固定文字朝向，始终对准相机
manim中可以使用-qpl -s来看最后一帧加速制作过程